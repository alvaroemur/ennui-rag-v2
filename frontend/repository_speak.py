"""
Repository Speak - Servicio de selecci√≥n de archivos indexados, lectura v√≠a LLM y conversi√≥n de formato
Speak = Conversaci√≥n inteligente con archivos
"""
import streamlit as st
import requests
import pandas as pd
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from config import API_BASE_URL_INTERNAL
from auth_utils import make_authenticated_request


def render_speak_screen():
    """Renderiza la pantalla principal del servicio Speak"""
    # Verificar que hay un programa seleccionado
    selected_program_id = st.session_state.get("selected_program_id")
    if not selected_program_id:
        st.error("No se ha seleccionado un programa.")
        if st.button("Volver a selecci√≥n de programa"):
            st.session_state["view"] = "program_selection"
            st.rerun()
        st.stop()
    
    # Bot√≥n para volver
    if st.button("‚Üê Volver al Homepage"):
        st.session_state["view"] = "homepage"
        st.rerun()
    
    st.markdown("## üó£Ô∏è Repository Speak - Conversaci√≥n Inteligente")
    st.markdown("Servicio de selecci√≥n de archivos indexados, lectura v√≠a LLM y conversi√≥n de formato")
    
    # Obtener datos del programa
    program_data = get_program_data(selected_program_id)
    if not program_data:
        st.error("No se pudieron cargar los datos del programa.")
        return
    
    # Tabs principales
    tab1, tab2, tab3 = st.tabs(["üìÅ Selecci√≥n de Archivos", "ü§ñ Prompt", "üìä Resultados"])
    
    with tab1:
        render_file_selection_tab(selected_program_id, program_data)
    
    with tab2:
        render_prompt_tab(selected_program_id)
    
    with tab3:
        render_results_tab(selected_program_id)


def render_file_selection_tab(program_id: int, program_data: Dict):
    """Tab de selecci√≥n de archivos indexados"""
    st.markdown("### üìÅ Selecci√≥n de Archivos Indexados")
    
    # Filtros de b√∫squeda
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        search_query = st.text_input("üîç Buscar archivos", placeholder="Ingresa palabras clave...")
    
    with col2:
        file_type_filter = st.selectbox(
            "Tipo de archivo",
            ["Todos", "PDF", "DOC", "DOCX", "TXT", "XLSX", "PPTX", "Google Docs"]
        )
    
    with col3:
        status_filter = st.selectbox(
            "Estado",
            ["Todos", "Completado", "Pendiente", "Fallido"]
        )
    
    # Botones de b√∫squeda
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("üîç Buscar Archivos", type="primary", use_container_width=True):
            search_files(program_id, search_query, file_type_filter, status_filter)
    
    with col2:
        if st.button("üîÑ Limpiar B√∫squeda", use_container_width=True):
            if "search_results" in st.session_state:
                del st.session_state["search_results"]
            st.rerun()
    
    # Mostrar archivos disponibles
    render_files_list(program_id, search_query, file_type_filter, status_filter)


def render_files_list(program_id: int, search_query: str, file_type_filter: str, status_filter: str):
    """Renderiza la lista de archivos con opciones de selecci√≥n"""
    st.markdown("### Archivos Disponibles")
    
    # Verificar si hay resultados de b√∫squeda
    search_results = st.session_state.get("search_results")
    
    if search_results and search_results.get("query") == search_query and search_results.get("file_type") == file_type_filter and search_results.get("status") == status_filter:
        # Usar resultados de b√∫squeda real
        files_data = search_results.get("files", [])
        total_count = search_results.get("total_count", 0)
        st.info(f"üîç Mostrando {len(files_data)} de {total_count} resultados para: '{search_query}'")
    else:
        # Usar datos mockup por defecto
        files_data = get_mockup_files_data()
        if search_query or file_type_filter != "Todos" or status_filter != "Todos":
            st.info("üí° Usa el bot√≥n 'Buscar Archivos' para realizar una b√∫squeda real en la base de datos")
        else:
            st.info("üìÅ Mostrando archivos de ejemplo (datos mockup)")
    
    if not files_data:
        st.info("No hay archivos indexados disponibles.")
        return
    
    # Aplicar filtros (solo si no hay b√∫squeda activa)
    if not search_results or search_results.get("query") != search_query or search_results.get("file_type") != file_type_filter or search_results.get("status") != status_filter:
        filtered_files = apply_file_filters(files_data, search_query, file_type_filter, status_filter)
    else:
        filtered_files = files_data
    
    if not filtered_files:
        st.warning("No se encontraron archivos que coincidan con los filtros.")
        return
    
    # Mostrar estad√≠sticas
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total archivos", len(files_data))
    with col2:
        st.metric("Filtrados", len(filtered_files))
    with col3:
        selected_count = len([f for f in filtered_files if f.get("selected", False)])
        st.metric("Seleccionados", selected_count)
    with col4:
        total_size = sum(f.get("file_size", 0) for f in filtered_files)
        st.metric("Tama√±o total (MB)", round(total_size / (1024 * 1024), 2))
    
    # Selecci√≥n de archivo √∫nico
    st.markdown("#### Selecciona un archivo para procesar:")
    
    # Crear opciones para radio button
    file_options = []
    for i, file in enumerate(filtered_files):
        file_options.append(f"{file['name']} ({file['type']}) - {round(file['file_size'] / 1024, 2)} KB")
    
    if file_options:
        # Radio button para selecci√≥n √∫nica
        selected_index = st.radio(
            "Archivos disponibles:",
            range(len(file_options)),
            format_func=lambda x: file_options[x],
            key=f"file_selection_{program_id}"
        )
        
        # Marcar el archivo seleccionado
        for i, file in enumerate(filtered_files):
            file["selected"] = (i == selected_index)
        
        # Guardar el estado actualizado en session state si hay b√∫squeda activa
        search_results = st.session_state.get("search_results")
        if search_results and search_results.get("query") == search_query and search_results.get("file_type") == file_type_filter and search_results.get("status") == status_filter:
            search_results["files"] = filtered_files
            st.session_state["search_results"] = search_results
    
    # Bot√≥n de carga de archivo
    if file_options:
        selected_file = filtered_files[selected_index]
        
        if st.button("üìÅ Cargar archivo", type="primary", use_container_width=True):
            st.session_state["selected_file_for_speak"] = selected_file
            st.rerun()
        
        # Mostrar detalles del archivo seleccionado
        if "selected_file_for_speak" in st.session_state:
            render_file_details(st.session_state["selected_file_for_speak"])


def render_file_details(selected_file: Dict):
    """Renderiza los detalles del archivo seleccionado"""
    st.markdown("### üìÑ Detalles del archivo seleccionado")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Informaci√≥n b√°sica")
        st.write(f"**Nombre:** {selected_file['name']}")
        st.write(f"**Tipo:** {selected_file['type']}")
        st.write(f"**Tama√±o:** {round(selected_file['file_size'] / 1024, 2)} KB")
        st.write(f"**Estado:** {selected_file['status']}")
        st.write(f"**Ruta:** {selected_file['path']}")
    
    with col2:
        st.markdown("#### Fechas")
        st.write(f"**√öltima modificaci√≥n:** {selected_file['modified_time']}")
        if 'created_time' in selected_file:
            st.write(f"**Fecha de creaci√≥n:** {selected_file['created_time']}")
    
    # Mostrar contenido si est√° disponible
    if 'content_text' in selected_file and selected_file['content_text']:
        st.markdown("#### Contenido del archivo")
        st.text_area("Texto extra√≠do:", selected_file['content_text'], height=200, disabled=True)
    
    # Mensaje informativo
    st.info("‚ÑπÔ∏è El archivo se encuentra seleccionado. Puede proceder a la ventana de Prompt.")


def render_prompt_tab(program_id: int):
    """Tab de prompt para procesamiento LLM"""
    st.markdown("### ü§ñ Prompt")
    
    # Verificar si hay archivo seleccionado
    selected_file = st.session_state.get("selected_file_for_speak")
    if not selected_file:
        st.warning("‚ö†Ô∏è No hay archivo seleccionado. Ve a la pesta√±a 'Selecci√≥n de Archivos' primero.")
        return
    
    st.info(f"üìÅ Archivo seleccionado: {selected_file['name']}")
    
    # Configuraci√≥n del LLM
    st.markdown("#### Configuraci√≥n del LLM")
    
    col1, col2 = st.columns(2)
    
    with col1:
        llm_model = st.selectbox(
            "Modelo de LLM",
            ["gpt-4", "gpt-3.5-turbo", "claude-3-sonnet", "claude-3-haiku"],
            index=0
        )
        
        temperature = st.slider("Temperatura", 0.0, 2.0, 0.7, 0.1)
    
    with col2:
        max_tokens = st.number_input("M√°ximo de tokens", 100, 4000, 1000)
        
        language = st.selectbox(
            "Idioma de salida",
            ["Espa√±ol", "Ingl√©s", "Franc√©s", "Portugu√©s"],
            index=0
        )
    
    # Prompt personalizado
    st.markdown("#### Prompt de Procesamiento")
    default_prompt = """Analiza el siguiente documento y extrae la informaci√≥n m√°s relevante. 
    Identifica:
    1. Objetivos principales
    2. Metodolog√≠as utilizadas
    3. Resultados obtenidos
    4. Conclusiones importantes
    5. Recomendaciones
    
    Proporciona la informaci√≥n en un formato estructurado y claro."""
    
    custom_prompt = st.text_area(
        "Prompt personalizado",
        value=default_prompt,
        height=150,
        help="Personaliza el prompt que se enviar√° al LLM para procesar los documentos."
    )
    
    # Bot√≥n de procesamiento
    if st.button("üó£Ô∏è Iniciar Procesamiento LLM", type="primary"):
        process_file_with_llm(selected_file, llm_model, temperature, max_tokens, language, custom_prompt)




def render_results_tab(program_id: int):
    """Tab de resultados"""
    st.markdown("### üìä Resultados del Procesamiento")
    
    # Verificar si hay resultado de LLM
    llm_result = st.session_state.get("llm_processing_result")
    if not llm_result:
        st.warning("‚ö†Ô∏è No hay resultado de procesamiento LLM. Ve a la pesta√±a 'Prompt' primero.")
        return
    
    st.success(f"‚úÖ Resultado de procesamiento disponible para: {llm_result['file_name']}")
    
    # Mostrar resumen
    render_llm_result_summary(llm_result)
    
    # Mostrar resultado detallado
    render_detailed_llm_result(llm_result)
    
    # Opciones de exportaci√≥n
    render_export_options(llm_result)


def get_mockup_files_data() -> List[Dict]:
    """Genera datos mockup de archivos indexados"""
    return [
        {
            "id": 1,
            "name": "Plan_Estrategico_2024.pdf",
            "type": "PDF",
            "file_size": 2048576,  # 2MB
            "status": "Completado",
            "modified_time": "2024-01-15 10:30:00",
            "path": "/Programas/Plan_2024/Plan_Estrategico_2024.pdf",
            "selected": False
        },
        {
            "id": 2,
            "name": "Informe_Trimestral_Q1.docx",
            "type": "DOCX",
            "file_size": 1024000,  # 1MB
            "status": "Completado",
            "modified_time": "2024-01-20 14:15:00",
            "path": "/Programas/Plan_2024/Informes/Informe_Trimestral_Q1.docx",
            "selected": False
        },
        {
            "id": 3,
            "name": "Metodologia_Implementacion.txt",
            "type": "TXT",
            "file_size": 512000,  # 512KB
            "status": "Completado",
            "modified_time": "2024-01-18 09:45:00",
            "path": "/Programas/Plan_2024/Metodologia_Implementacion.txt",
            "selected": False
        },
        {
            "id": 4,
            "name": "Presupuesto_Detallado.xlsx",
            "type": "XLSX",
            "file_size": 768000,  # 768KB
            "status": "Completado",
            "modified_time": "2024-01-22 16:20:00",
            "path": "/Programas/Plan_2024/Presupuesto_Detallado.xlsx",
            "selected": False
        },
        {
            "id": 5,
            "name": "Presentacion_Resultados.pptx",
            "type": "PPTX",
            "file_size": 1536000,  # 1.5MB
            "status": "Completado",
            "modified_time": "2024-01-25 11:30:00",
            "path": "/Programas/Plan_2024/Presentaciones/Presentacion_Resultados.pptx",
            "selected": False
        },
        {
            "id": 6,
            "name": "Documento_Colaborativo",
            "type": "Google Docs",
            "file_size": 256000,  # 256KB
            "status": "Completado",
            "modified_time": "2024-01-28 13:45:00",
            "path": "/Programas/Plan_2024/Colaborativo/Documento_Colaborativo",
            "selected": False
        },
        {
            "id": 7,
            "name": "Manual_Procedimientos.pdf",
            "type": "PDF",
            "file_size": 3072000,  # 3MB
            "status": "Pendiente",
            "modified_time": "2024-01-30 08:15:00",
            "path": "/Programas/Plan_2024/Manuales/Manual_Procedimientos.pdf",
            "selected": False
        },
        {
            "id": 8,
            "name": "Archivo_Corrupto.docx",
            "type": "DOCX",
            "file_size": 0,
            "status": "Fallido",
            "modified_time": "2024-01-12 12:00:00",
            "path": "/Programas/Plan_2024/Archivo_Corrupto.docx",
            "selected": False
        }
    ]


def apply_file_filters(files: List[Dict], search_query: str, file_type_filter: str, status_filter: str) -> List[Dict]:
    """Aplica filtros a la lista de archivos"""
    filtered = files.copy()
    
    # Filtro de b√∫squeda
    if search_query:
        filtered = [f for f in filtered if search_query.lower() in f["name"].lower()]
    
    # Filtro de tipo de archivo
    if file_type_filter != "Todos":
        filtered = [f for f in filtered if f["type"] == file_type_filter]
    
    # Filtro de estado
    if status_filter != "Todos":
        filtered = [f for f in filtered if f["status"] == status_filter]
    
    return filtered




def search_files(program_id: int, query: str, file_type: str, status: str):
    """Busca archivos seg√∫n los criterios especificados"""
    try:
        # Preparar par√°metros de b√∫squeda
        search_params = {
            "program_id": program_id,
            "query": query if query else "",
            "file_types": [file_type.lower()] if file_type != "Todos" else None,
            "limit": 100
        }
        
        # Filtrar tipos de archivo nulos
        if search_params["file_types"] is None:
            del search_params["file_types"]
        
        # Realizar b√∫squeda en la API
        resp = make_authenticated_request(
            "POST", 
            f"{API_BASE_URL_INTERNAL}/api/indexing/search", 
            json=search_params,
            timeout=15
        )
        
        if resp.status_code == 200:
            search_result = resp.json()
            files_data = search_result.get("files", [])
            total_count = search_result.get("total_count", 0)
            
            # Convertir a formato esperado por la interfaz
            converted_files = []
            for file in files_data:
                # Mapear tipos de archivo a formato esperado
                file_type_mapping = {
                    "pdf": "PDF",
                    "docx": "DOCX", 
                    "doc": "DOC",
                    "txt": "TXT",
                    "xlsx": "XLSX",
                    "pptx": "PPTX",
                    "google_doc": "Google Docs"
                }
                
                converted_file = {
                    "id": file.get("id"),
                    "name": file.get("drive_file_name", ""),
                    "type": file_type_mapping.get(file.get("file_type", ""), file.get("file_type", "").upper()),
                    "file_size": file.get("file_size", 0),
                    "status": "Completado" if file.get("indexing_status") == "completed" else file.get("indexing_status", ""),
                    "modified_time": file.get("drive_modified_time", ""),
                    "path": file.get("drive_file_id", ""),
                    "selected": False
                }
                converted_files.append(converted_file)
            
            # Aplicar filtro de estado si no es "Todos"
            if status != "Todos":
                converted_files = [f for f in converted_files if f["status"] == status]
            
            # Guardar resultados en session state para mostrarlos
            st.session_state["search_results"] = {
                "files": converted_files,
                "total_count": total_count,
                "query": query,
                "file_type": file_type,
                "status": status
            }
            
            st.success(f"‚úÖ Encontrados {len(converted_files)} archivo(s) de {total_count} total")
            
        else:
            error_msg = resp.json().get("detail", "Error desconocido") if resp.headers.get("content-type", "").startswith("application/json") else resp.text
            st.error(f"‚ùå Error en la b√∫squeda: {error_msg}")
            
    except Exception as e:
        st.error(f"‚ùå Error de conexi√≥n: {str(e)}")
    
    # Refrescar la p√°gina para mostrar resultados
    st.rerun()


def process_file_with_llm(file: Dict, model: str, temperature: float, max_tokens: int, language: str, prompt: str):
    """Procesa un archivo seleccionado con LLM"""
    st.info("üó£Ô∏è Iniciando procesamiento con LLM...")
    
    # Simular procesamiento
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    status_text.text(f"Procesando: {file['name']}")
    
    # Simular tiempo de procesamiento
    time.sleep(2)
    
    # Generar resultado mockup
    result = {
        "file_id": file["id"],
        "file_name": file["name"],
        "processed_at": datetime.now().isoformat(),
        "llm_model": model,
        "llm_response": generate_mockup_llm_response(file["name"]),
        "metadata": {
            "temperature": temperature,
            "max_tokens": max_tokens,
            "language": language,
            "processing_time": 2.0
        }
    }
    
    progress_bar.progress(1.0)
    
    # Guardar resultado en session state
    st.session_state["llm_processing_result"] = result
    
    status_text.text("‚úÖ Procesamiento completado")
    st.success(f"‚úÖ Archivo '{file['name']}' procesado exitosamente")
    
    # Mostrar resumen del resultado
    st.markdown("#### Resumen del Procesamiento")
    with st.expander(f"üìÑ {result['file_name']}"):
        st.json(result["llm_response"])


def generate_mockup_llm_response(file_name: str) -> Dict:
    """Genera una respuesta mockup del LLM"""
    return {
        "objetivos_principales": [
            "Mejorar la eficiencia operativa",
            "Aumentar la satisfacci√≥n del cliente",
            "Optimizar los procesos internos"
        ],
        "metodologias_utilizadas": [
            "An√°lisis de datos cuantitativos",
            "Entrevistas con stakeholders",
            "Benchmarking de mejores pr√°cticas"
        ],
        "resultados_obtenidos": [
            "Incremento del 25% en la productividad",
            "Reducci√≥n del 30% en costos operativos",
            "Mejora del 40% en satisfacci√≥n del cliente"
        ],
        "conclusiones_importantes": [
            "La implementaci√≥n fue exitosa",
            "Se requieren ajustes menores",
            "El ROI es positivo a corto plazo"
        ],
        "recomendaciones": [
            "Continuar con la fase 2 del proyecto",
            "Capacitar al personal en nuevas herramientas",
            "Establecer m√©tricas de seguimiento"
        ],
        "resumen_ejecutivo": f"El documento '{file_name}' presenta un an√°lisis detallado de la implementaci√≥n del proyecto, mostrando resultados positivos y recomendaciones claras para el futuro.",
        "palabras_clave": ["eficiencia", "optimizaci√≥n", "productividad", "satisfacci√≥n", "ROI"],
        "confianza_score": 0.87
    }


def render_llm_result_summary(llm_result: Dict):
    """Renderiza el resumen del resultado del LLM"""
    st.markdown("#### Resumen del Procesamiento LLM")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Archivo Procesado", 1)
    
    with col2:
        content_size = len(str(llm_result["llm_response"]))
        st.metric("Tama√±o (KB)", round(content_size / 1024, 2))
    
    with col3:
        st.metric("Modelo LLM", llm_result["llm_model"])
    
    with col4:
        processing_time = llm_result["metadata"]["processing_time"]
        st.metric("Tiempo (s)", round(processing_time, 2))


def render_detailed_llm_result(llm_result: Dict):
    """Renderiza el resultado detallado del LLM"""
    st.markdown("#### Resultado Detallado")
    
    with st.expander(f"üìÑ {llm_result['file_name']} (LLM: {llm_result['llm_model']})"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.json(llm_result["llm_response"])
        
        with col2:
            st.json(llm_result["metadata"])


def render_export_options(llm_result: Dict):
    """Renderiza las opciones de exportaci√≥n"""
    st.markdown("#### Opciones de Exportaci√≥n")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üì• Descargar JSON", type="primary"):
            st.info("üöß Funcionalidad de descarga pendiente de implementaci√≥n")
    
    with col2:
        if st.button("üìã Copiar al Portapapeles"):
            st.info("üöß Funcionalidad de copia pendiente de implementaci√≥n")
    
    with col3:
        if st.button("üìß Enviar por Email"):
            st.info("üöß Funcionalidad de email pendiente de implementaci√≥n")


def get_program_data(program_id: int) -> Optional[Dict]:
    """Obtiene los datos del programa"""
    try:
        resp = make_authenticated_request("GET", f"{API_BASE_URL_INTERNAL}/api/programs/{program_id}", timeout=10)
        if resp.status_code == 200:
            return resp.json()
        return None
    except Exception:
        return None
